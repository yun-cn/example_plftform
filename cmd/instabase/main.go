package main

import (
	"compress/gzip"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/yanshiyason/noonde_platform/instabase"
)

func main() {
	// c := instabase.NewClient(nil)

	// payload, _, err := c.Search.Search(context.TODO(), &instabase.SearchParams{
	// 	// AreaID: ""
	// 	// Location: "tokyo",
	// 	StationID: 1130101, // TODO: query api to find location IDs.
	// 	PerPage:   12,
	// 	Page:      1,
	// })

	// if err != nil {
	// 	fmt.Printf("error: %+v\n", err)
	// }

	// fmt.Printf("payload: %+v\n", payload)

	// debugSpaceDetail()
	debugReviews()
}

// func debug() {
// 	type Variables struct {
// 		BottomRightLon interface{} `json:"bottomRightLon"`
// 		PrefectureID   interface{} `json:"prefectureId"`
// 		CapacityIds    interface{} `json:"capacityIds"`
// 		FromDateMonth  interface{} `json:"fromDateMonth"`
// 		ToTime         interface{} `json:"toTime"`
// 		WardID         interface{} `json:"wardId"`
// 		Page           interface{} `json:"page"`
// 		ConditionIds   []int       `json:"conditionIds"`
// 		CategoryIds    interface{} `json:"categoryIds"`
// 		EquipmentIds   interface{} `json:"equipmentIds"`
// 		PerPage        int         `json:"perPage"`
// 		BottomRightLat interface{} `json:"bottomRightLat"`
// 		FromDateYear   interface{} `json:"fromDateYear"`
// 		FromDateDay    interface{} `json:"fromDateDay"`
// 		OrderBy        interface{} `json:"orderBy"`
// 		UsageIds       interface{} `json:"usageIds"`
// 		TopLeftLat     interface{} `json:"topLeftLat"`
// 		AreaID         interface{} `json:"areaId"`
// 		TopLeftLon     interface{} `json:"topLeftLon"`
// 		FromTime       interface{} `json:"fromTime"`
// 		StationID      int         `json:"stationId"`
// 	}

// 	type Payload struct {
// 		Query     string     `json:"query"`
// 		Variables *Variables `json:"variables"`
// 	}

// 	data := Payload{
// 		Query: constants.SearchResultQuery,
// 		Variables: &Variables{
// 			ConditionIds: []int{44},
// 			StationID:    1130101,
// 			PerPage:      12,
// 		},
// 	}
// 	payloadBytes, err := json.Marshal(data)
// 	if err != nil {
// 		panic(err)
// 	}
// 	body := bytes.NewReader(payloadBytes)

// 	req, err := http.NewRequest("POST", "https://www.instabase.jp/graphql", body)
// 	if err != nil {
// 		panic(err)
// 	}
// 	req.Host = "www.instabase.jp"
// 	req.Header.Set("Content-Type", "application/json")
// 	req.Header.Set("Accept", "*/*")
// 	req.Header.Set("Authorization", "Bearer")
// 	req.Header.Set("App_version", "2.0.0")
// 	req.Header.Set("If-None-Match", "W/\"c6fdf46ade0d64ecc87721705751b44d\"")
// 	req.Header.Set("Accept-Language", "en-us")
// 	req.Header.Set("Accept-Encoding", "br, gzip, deflate")
// 	req.Header.Set("App_platform", "IB-iOS")
// 	req.Header.Set("Content-Length", "2071")
// 	req.Header.Set("User-Agent", "Instabase/34 CFNetwork/976 Darwin/18.2.0")
// 	req.Header.Set("App_type", "user")
// 	req.Header.Set("Cookie", "_instabase_session=671451940b41a8d4f7e5ed3bf8ecfe96; _insttid=01dccc6ad6daf62972ae742278048a7abf517f5c")

// 	resp, err := http.DefaultClient.Do(req)
// 	if err != nil {
// 		panic(err)
// 	}
// 	defer resp.Body.Close()

// 	reader, err := gzip.NewReader(resp.Body)

// 	bb, _ := ioutil.ReadAll(reader)

// 	fmt.Printf("%+v\n", string(bb))
// }

// func debugPlaceSuggest() {

// 	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

// 	type Variables struct {
// 		Keyword string `json:"keyword"`
// 	}

// 	type Payload struct {
// 		Query     string     `json:"query"`
// 		Variables *Variables `json:"variables"`
// 	}

// 	data := Payload{
// 		Query: constants.PlaceSuggestQuery,
// 		Variables: &Variables{
// 			Keyword: "しぶ",
// 		},
// 	}
// 	payloadBytes, err := json.Marshal(data)
// 	if err != nil {
// 		panic(err)
// 	}
// 	body := bytes.NewReader(payloadBytes)

// 	req, err := http.NewRequest("POST", "https://www.instabase.jp/graphql", body)
// 	if err != nil {
// 		panic(err)
// 	}
// 	req.Host = "www.instabase.jp"
// 	req.Header.Set("Content-Type", "application/json")
// 	req.Header.Set("Accept", "*/*")
// 	req.Header.Set("Authorization", "Bearer")
// 	req.Header.Set("App_version", "2.0.0")
// 	req.Header.Set("If-None-Match", "W/\"fdc2d09eed966a77b9e6ea26e6293827\"")
// 	req.Header.Set("Accept-Language", "en-us")
// 	req.Header.Set("Accept-Encoding", "br, gzip, deflate")
// 	req.Header.Set("App_platform", "IB-iOS")
// 	req.Header.Set("Content-Length", "263")
// 	req.Header.Set("User-Agent", "Instabase/34 CFNetwork/976 Darwin/18.2.0")
// 	req.Header.Set("App_type", "user")
// 	req.Header.Set("Cookie", "_instabase_session=671451940b41a8d4f7e5ed3bf8ecfe96; _insttid=01dccc6ad6daf62972ae742278048a7abf517f5c")

// 	resp, err := http.DefaultClient.Do(req)
// 	if err != nil {
// 		panic(err)
// 	}
// 	defer resp.Body.Close()

// 	reader, err := gzip.NewReader(resp.Body)

// 	bb, _ := ioutil.ReadAll(reader)

// 	fmt.Printf("%+v\n", string(bb))
// }

func debugSpaceDetail() {
	c := instabase.NewClient(nil)
	req, err := c.SpaceDetail.NewRequest("6149")
	// req, err := c.SpaceDetail.NewRequest("")
	if err != nil {
		panic(err)
	}

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		panic(err)
	}
	defer resp.Body.Close()

	reader, err := gzip.NewReader(resp.Body)

	bb, _ := ioutil.ReadAll(reader)

	fmt.Printf("%+v\n", string(bb))
}

func debugReviews() {
	c := instabase.NewClient(nil)
	req, err := c.Reviews.NewRequest("6921", "")
	if err != nil {
		panic(err)
	}

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		panic(err)
	}
	defer resp.Body.Close()

	reader, err := gzip.NewReader(resp.Body)

	bb, _ := ioutil.ReadAll(reader)

	fmt.Printf("%+v\n", string(bb))
}
